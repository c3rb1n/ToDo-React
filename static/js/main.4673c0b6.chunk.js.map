{"version":3,"sources":["Form/Form.module.scss","Tasks/Task/Task.module.scss","Tasks/Tasks.module.scss","Form/Form.jsx","Tasks/Task/Task.jsx","Tasks/Tasks.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","tasks","setTask","useState","inputText","setInputText","className","classes","form","form__input","type","onChange","e","currentTarget","value","placeholder","maxLength","form__add","onClick","text","Task","id","task","task__remove","filter","t","index","Tasks","tasksElements","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,0BAA0B,UAAY,0B,gBCAhGD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,aAAe,6B,kBCA3DD,EAAOC,QAAU,CAAC,MAAQ,uB,gMCyBXC,EAvBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAAa,EACGC,mBAAS,IADZ,mBACxBC,EADwB,KACbC,EADa,KAU/B,OACI,yBAAKC,UAAWC,IAAQC,MACpB,2BAAOF,UAAWC,IAAQE,YACnBC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOP,EAAaO,EAAEC,cAAcC,QAC9CA,MAAOV,EACPW,YAAY,2BACZC,UAAW,KAClB,4BAAQV,UAAWC,IAAQU,UAAWC,QAfrB,WACjBd,IACAF,EAAQ,GAAD,mBAAKD,GAAL,CAAY,CAACkB,KAAMf,MAC1BC,EAAa,OAYb,S,gCCLGe,EAbF,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,GAAIF,EAA0B,EAA1BA,KAAMlB,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAK5B,OACI,yBAAKI,UAAWC,IAAQe,MACpB,8BAAOH,GACP,4BAAQb,UAAWC,IAAQgB,aAAcL,QAPrB,WACxBhB,EAAQD,EAAMuB,QAAO,SAACC,EAAGC,GAAJ,OAAcL,IAAOK,QAMtC,YCOGC,EAdD,SAAC,GAAsB,IAArB1B,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACb0B,EAAgB3B,EAAM4B,KAAI,SAACJ,EAAGC,GAAJ,OAAc,kBAAC,EAAD,CAAMI,IAAKJ,EACLL,GAAIK,EACJP,KAAMM,EAAEN,KACRlB,MAAOA,EACPC,QAASA,OAE7D,OACI,yBAAKI,UAAWC,IAAQN,OACnB2B,ICKEG,EAbH,WAAO,IAAD,EACW5B,mBAAS,IADpB,mBACPF,EADO,KACAC,EADA,KAGd,OACI,yBAAKI,UAAU,OACX,yBAAKA,UAAU,aACX,kBAAC,EAAD,CAAML,MAAOA,EAAOC,QAASA,IAC7B,kBAAC,EAAD,CAAOD,MAAOA,EAAOC,QAASA,OCA1B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4673c0b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2ABdx\",\"form__input\":\"Form_form__input__36bY_\",\"form__add\":\"Form_form__add__1yv2I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__1lN03\",\"task__remove\":\"Task_task__remove__39JGe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks\":\"Tasks_tasks__3Ip9U\"};","import React, {useState} from \"react\";\r\nimport classes from \"./Form.module.scss\";\r\n\r\nconst Form = ({tasks, setTask}) => {\r\n    const [inputText, setInputText] = useState(\"\");\r\n\r\n    const onAddButtonClick = () => {\r\n        if (inputText) {\r\n            setTask([...tasks, {text: inputText}]);\r\n            setInputText(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.form}>\r\n            <input className={classes.form__input}\r\n                   type=\"text\"\r\n                   onChange={(e) => setInputText(e.currentTarget.value)}\r\n                   value={inputText}\r\n                   placeholder=\"Max length is 20 symbols\"\r\n                   maxLength={20}/>\r\n            <button className={classes.form__add} onClick={onAddButtonClick}>Add</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport classes from \"./Task.module.scss\";\r\n\r\nconst Task = ({id, text, tasks, setTask}) => {\r\n    const onRemoveButtonClick = () => {\r\n        setTask(tasks.filter((t, index) => id !== index));\r\n    };\r\n\r\n    return (\r\n        <div className={classes.task}>\r\n            <span>{text}</span>\r\n            <button className={classes.task__remove} onClick={onRemoveButtonClick}>Remove</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Task;","import React from \"react\";\r\nimport classes from \"./Tasks.module.scss\";\r\nimport Task from \"./Task/Task\";\r\n\r\nconst Tasks = ({tasks, setTask}) => {\r\n    const tasksElements = tasks.map((t, index) => <Task key={index}\r\n                                                        id={index}\r\n                                                        text={t.text}\r\n                                                        tasks={tasks}\r\n                                                        setTask={setTask}/>);\r\n\r\n    return (\r\n        <div className={classes.tasks}>\r\n            {tasksElements}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tasks;","import React, {useState} from \"react\";\nimport \"./App.scss\";\nimport Form from \"./Form/Form\";\nimport Tasks from \"./Tasks/Tasks\";\n\nconst App = () => {\n    const [tasks, setTask] = useState([]);\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__toDo\">\n                <Form tasks={tasks} setTask={setTask}/>\n                <Tasks tasks={tasks} setTask={setTask}/>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}